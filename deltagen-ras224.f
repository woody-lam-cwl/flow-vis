C******************************************************************************
C         PROGRAM TO GENERATE A  3D DATA SET FOR MULTIPLE BLADE ROWS          *
C         AND WRITE OUT A DATA FILE FOR THE 3D PROGRAM 'MULTSTAGE'            *
C******************************************************************************
C
      DIMENSION  XIN(900),YIN(900),YSIN(900),YPIN(900),TKIN(900), 
     &           FRAC(500), SLOPE(500),XGRID(900),F(900),DYDX(900),
     &           XGRIDON(900),YGRID(900),TKGRID(900),FP(99),
     &           RIN(500),XRIN(500),RGRID(900),FR(99),
     &           F1(99),F2(99),B1(99),BR(99),SUMFR(99),
     &           XFRAC(500),RELSPCE(500),FSPAN(500),B1IN(500),
     &           BRIN(500),POIN(500),TOIN(500),VTIN(500),VMIN(500),
     &           PO1(99),TO1(99),VT1(99),VM1(99),TKMULT(99),
     &           FGAP(500), SPACE(500)
C
      DIMENSION XSURF(900),YSURF(900),XCLOCK(900),YCLOCK(900),XUP(500),
     & YUP(500),SGRID(500),SMERID(500),TEMP(900),XLOW(500),YLOW(500),
     & XLTE(500),YSTE(500),YPTE(500),FTHICK(500)
C
      DIMENSION XBLOCK(300,100,100,2),RBLOCK(300,100,100,2),
     &          YBLOCK(300,100,100,2)
C
      REAL  MACH, ERROR
      INTEGER NSTEPS
C
       CHARACTER*72  SIM_NAME,OUTPUT_PATH,TITLE,ROWTIT,dummy line
       CHARACTER*1   ANS,DUMMY,INDI,INDE,INDP,INDF
       LOGICAL DELTACWD,RESULTS_EXIST
C 
C     SET THE INPUT AND OUTPUT UNITS
C
C     THE MAIN INPUT FILE IS 'deltagen.raw'
C
C     A FILE 'out' CONTAINS THE BLADE COORDINATES AND OTHER POSSIBLY
C                  USEFUL DATA.
C
C     THE FILE 'stage.dat' IS AN INPUT FILE FOR THE MULTISTAGE 3D PROGRAM
C 
      INQUIRE( FILE='deltagen.raw', EXIST=DELTACWD)
      
      WRITE(6,*) 'Simulation name: '
      READ(5,*) SIM_NAME
      
      OUTPUT_PATH = './results/'//TRIM(SIM_NAME)//'/'
      
      INQUIRE(FILE=OUTPUT_PATH, EXIST=RESULTS_EXIST)
      
      IF (RESULTS_EXIST) THEN
      	WRITE(6,*) 'Directory already exist: '//TRIM(OUTPUT_PATH)
      	CALL EXIT(1)
      ELSE
      	CALL system('mkdir -p '//TRIM(OUTPUT_PATH))
      ENDIF
      
      IF (DELTACWD) THEN
         WRITE(6,*) 'Using input file: ./deltagen.raw '
         OPEN( UNIT=7,FILE='deltagen.raw') 
      ELSE
c        RAS224: Changed location of default input file
         WRITE(6,*) 
     &    'Using input file: /usr/local/example_scripts/deltagen.raw'
         OPEN( UNIT=7,FILE= '/usr/local/example_scripts/deltagen.raw') 
      ENDIF         
      WRITE(6,*)
      OPEN(UNIT=8,FILE=TRIM(OUTPUT_PATH) // 'out')
      OPEN(UNIT=4,FILE=TRIM(OUTPUT_PATH) // 'delta-multip.dat')
C
      PI=3.1415927
      DEGRAD=PI/180.
C
      WRITE(6,*) ' INPUT CONVERGENCE ERROR FOR LIFT AND DRAG COEFF. '
      READ(5,*) ERROR
      WRITE(6,*) ' INPUT THE MACH NUMBER '
      READ(5,*)  MACH
      WRITE(6,*)
C     ADDED BY KC485:
      WRITE(6,*) ' INPUT THE REYNOLDS NUMBER '
      READ(5,*)  REYNO
      WRITE(6,*)
C
      WRITE(6,*) ' INPUT THE ANGLE OF ATTACK IN DEGREES '
      READ(5,*)   ANG_ATTACK
C      ANG_ATTACK = -ANG_ATTACK
      WRITE(6,*)
      WRITE(6,*)' INPUT THE ANGLE OF SWEEP OF THE DELTA WING,IN DEGREES'
      WRITE(6,*) ' THIS IS THE ANGLE BETWEEN THE LEADING EDGE AND A NORM
     &MAL TO WALL OF THE WIND TUNNEL'
      READ(5,*) ASWEEP
C
C
      WRITE(6,*)
      WRITE(6,*) ' INPUT THE FACTOR SCALING THE TOTAL NUMBER OF GRID POI
     &NTS. '
      WRITE(6,*) 'THIS SHOULD NOT BE MORE THAN 6 OR IT WILL EXCEED THE 
     &COMPUTER MEMORY.'
C
      READ(5,*)   FACPOINTS
      FACPOINTS = FACPOINTS**(0.33333)
C      WRITE(6,*) ' FACPOINTS = ', FACPOINTS
C
C      INPUT THE NUMBER OF GRID POINTS REQUIRED IN THE PITCHWISE
C      AND SPANWISE DIRECTIONS.   IM = PITCHWISE, KM= SPANWISE.
C      KTIPS  IS THE GRID POINT AT THE TIP OF THE WING.
C
      READ(7,*)  IM,KM,KTIPS
      WRITE(8,*) IM,KM,KTIPS
      IM    = IM*FACPOINTS
      KM    = KM*FACPOINTS
      KTIPS = KTIPS*FACPOINTS
C     WRITE(6,*) ' IM , KM, KTIPS =', IM,KM,KTIPS
C
      IMM1=IM-1
      KMM1=KM-1
C
C      INPUT THE EXPANSION RATIOS OF THE GRID IN PITCWISE DIRECTION
C      TYPICALLY =1.4.
C      ALSO  THE RATIO OF MAXIMUM TO MINIMUM GRID SPACING IN THE PITCHWISE
C      DIRECTION, TYPICALLY =20.
C
      READ(7,*)  FPRAT,FPMAX
      WRITE(8,*) FPRAT,FPMAX
C
      F1(1)=1.
      DO 81 I=2,IMM1
      F1(I)=F1(I-1)*FPRAT
   81 CONTINUE
      DO 52 I=1,IMM1
      F2(I)= F1(IM-I)
   52 CONTINUE
      DO 53 I=1,IMM1
      FP(I)=F1(I)
      IF(F1(I).GT.F2(I)) FP(I)= F2(I)
      IF(FP(I).GT.FPMAX) FP(I)=FPMAX
   53 CONTINUE
C
C      INPUT THE EXPANSION RATIOS OF THE GRID IN THE SPANWISE DIRECTION
C      TYPICALLY =1.4.
C      ALSO  THE RATIO OF MAXIMUM TO MINIMUM GRID SPACING IN THE SPANWISE
C      DIRECTION, TYPICALLY =20.
C

      READ(7,*)  FRRAT,FRMAX
      WRITE(8,*) FRRAT,FRMAX
C
C
C      INPUT THE NUMBER OF BLADE ROWS IN THE MACHINE
C      AND THE NUMBER OF SECTIONS ON WHICH THE BLADE DATA IS TO BE INPUT
C
C
      READ(7,*) NROWS,NOSECT
      NROWS  = 1
      NOSECT = 3
      WRITE(8,*) NROWS,NOSECT
C
C
      SUMFR(1)=0.0
      DO 91 K=1,KTIPS-1
      FR(K)=1.0
   91 CONTINUE
      DO 92 K = KTIPS,KM-1
      FR(K) = FR(K-1)*FRRAT
      IF(FR(K).GT.FRMAX) FR(K) = FRMAX
   92 CONTINUE
      DO 64 K=2,KM     
   64 SUMFR(K)=SUMFR(K-1)+FR(K-1)
C
C     INPUT THE DEFAULT PROGRAM VARIABLES IF REQUESTED
C
      READ(7,*)   IFDEF
      WRITE(8,*) ' IFDEF = ', IFDEF
C
      IF(IFDEF.NE.0) THEN
      READ(7,*) NMAX,IFMIX,ISHIFT,NCHANGE
      READ(7,*) INMACH,INPUT,INVR,ITIMST,ISMTH,IPOUT,INFLOW,NLOS,ILOS
     &         ,IINST,IOUTST,IBOUND
      READ(7,*) IR,JR,KR,IRBB,JRBB,KRBB,NSBUP,NSBON,NSBDN
      READ(7,*) CP,GA,FT,SF,SFX,RF,FUP
      READ(7,*) DAMP,FVMIN,FBLK1,FBLK2,FBLK3,SFEX,CLIM,RFIN
      READ(7,*) FRACPB,FRACPW,REYNO,FTRANS,FACSEC
      ELSE
      ENDIF
C
C
C  SET THE DEFAULT VALUES OF SOME CONTROL PARAMETERS REQUIRED BY THE 3D PROGRAM
C
      IF(IFDEF.EQ.0) THEN
      NMAX   = 5000 
      INMACH = 0
      INPUT  = 2 
      INVR   = 0
      ITIMST = 3 
      ISMTH  = 1 
      IPOUT  = 1
      INFLOW = 0 
      ILOS   = 12 
      NLOS   = 5 
      IINST  = 0
      IOUTST = 1 
      IBOUND = 3 
      IR     = 3
      JR     = 3
      KR     = 3
      IRBB   = 9
      JRBB   = 9
      KRBB   = 9
      NSBUP  = 1
      NSBON  = 3
      NSBDN  = 1
      KTIPE  = KM
      JROTHS = 1
      JROTHE = 1
      JROTTS = 1
      JROTTE = 1
      IFMIX  = 1
      ISHIFT = 2
      NCHANGE= 500
      CP     = 1005.0
      GA     = 1.400
      FT     = 0.4
      SF     = 0.010
      SFX    = 0.010
      RF     = 0.10
      FUP    = -0.9
      DAMP   = 10.
      FVMIN  = 0.1
      FBLK1  = 0.4
      FBLK2  = 0.2
      FBLK3  = 0.1
      SFEX   = 0.0
      CLIM   = 0.001
      RFIN   = 0.10
      RFMIX  = 0.10
      FEXT   = 0.80
      FRACPB = 0.03
      FRACPW = 0.03
      FTRANS = 0.001
      FACSEC = 0.8
      ELSE
      ENDIF
C
C
C     END OF DEFAULTS
C
C
      TOINLET  = 300.
      POINLET  = 100000.
      TRAT     = 1./(1. + 0.5*(GA-1.)*MACH*MACH)
      PRAT     = TRAT**(GA/(GA-1.))
      PINLET   = POINLET*PRAT
      VELIN    = SQRT(2.*CP*TOINLET*(1-TRAT))
      IF(MACH.GT.1.0) RFIN = 0.0
C
C
      TWIDTH  =  1.0
      WRITE(6,*)
      WRITE(6,*) ' THE CALCULATION ASSUMES SYMMETRY ABOUT THE CENTRELINE
     & OF THE WING SO ONLY A HALF SPAN IS CALCULATED.'
      WRITE(6,*)' THE HALF SPAN WING IS MOUNTED ON ONE SIDE WALL OF THE
     &WIND TUNNEL. '
      WRITE(6,*)
      WRITE(6,*) ' INPUT THE WING HALF SPAN AS A FRACTION OF THE TUNNEL
     & WIDTH, TYPICALLY = 0.333 '
      READ(5,*)    FRACSPAN
      RHUB   = 100.*TWIDTH
      RBOUND = RHUB + TWIDTH
      RTIP   = RHUB + FRACSPAN*TWIDTH
      FRACTIP= 1.0 - FRACSPAN
C
C      READ IN THE TUNNEL HEIGHT
C
      WRITE(6,*)
      WRITE(6,*) ' INPUT THE RATIO OF TUNNEL HEIGHT TO TUNNEL WIDTH, A
     &TYPICAL VALUE = 2. '
      READ(5,*)    RATIO
      THEIGHT  =   TWIDTH*RATIO
      WRITE(8,*) ' TUNNEL HEIGHT = ', THEIGHT
      HHEIGHT = 0.5*THEIGHT
C
      NBLADE = 2.*3.14159*RHUB/THEIGHT
C
      SPAN   = (RTIP-RHUB)
      XCHORD = SPAN*TAN(ASWEEP*3.14159/180.)
      XLEHUB = 0.0
      XLETIP = XCHORD
      REFCHORD = AMAX1(XCHORD,SPAN)
      TIPCHORD = 0.2*REFCHORD
      XTEHUB = XCHORD + TIPCHORD
      XTETIP = XTEHUB
      XEXIT  = XTEHUB + 1.0*REFCHORD
      XINLET = XLEHUB - 0.5*REFCHORD
C      WRITE(6,*) ' XINLET =', XINLET
C      WRITE(6,*) ' XLEHUB =', XLEHUB
C      WRITE(6,*) ' XLETIP =', XLETIP
C      WRITE(6,*) ' XTEHUB =', XTEHUB
C      WRITE(6,*) ' XTETIP =', XTETIP
C      WRITE(6,*) ' XEXIT  =', XEXIT

C
      WRITE(6,*)
      WRITE(6,*)' INPUT THE TIME STEP FACTOR. USUALLY = 1.0. REDUCE THIS
     & TO INCREASE STABILITY. ' 
      READ(5,*)   FACTIME
      WRITE(6,*)
      WRITE(6,*) ' INPUT THE SMOOTHING FACTOR. USUALLY = 1.0. INCREASE T
     &HIS TO INCREASE STABILITY BUT THIS ALSO REDUCES ACCURACY.'
      READ(5,*)  FACSMOOTH
C
      FT  = FT*FACTIME
      SF  = SF*FACSMOOTH
      SFX = SFX*FACSMOOTH
      FAC = 1.0
C     ADDED BY KC485:
      WRITE(6,*)
      WRITE(6,*) ' INPUT THE NUMBER OF STEPS '
      READ(5,*)  NSTEPS
C 
      WRITE(4,*) ('  DELTA WING DATA SET FOR MULTIP  ') 
      WRITE(4,1600)IM,0,KM,0,NMAX,0,0,NOSECT,NROWS,
     &             IFMIX,ISHIFT,KM,5,5,NCHANGE
C
      WRITE(4,1600)INMACH,INPUT,INVR,ITIMST,ISMTH,IPOUT,INFLOW, 
     &             ILOS,NLOS,IINST,IOUTST,IBOUND
C
      WRITE(4,1600) IR,JR,KR,IRBB,JRBB,KRBB,NSBUP,NSBON,NSBDN 
C
 1600 FORMAT(16I5)
C
C******************************************************************************
C
      DO 9000 NROW=1,NROWS
C
C      READ IN THE TITLE OF THE BLADE ROW
C
      READ(7,997)  dummy line
      READ(7,997)  ROWTIT
      WRITE(4,997) ROWTIT
      READ(7,997)  dummy line
  997 FORMAT(72A)
C
C
C     READ IN THE NUMBERS OF GRID POINTS REQUIRED UPSTEAM, ON AND 
C     DOWNSTREAM OF THE BLADE. TYPICALLY  15,60,15  . 
C
      READ(7,*)  NINTUP,NINTON,NINTDN 
      WRITE(8,*) NINTUP,NINTON,NINTDN
      NINTUP = NINTUP*FACPOINTS
      NINTON = NINTON*FACPOINTS
      NINTDN = NINTDN*FACPOINTS
C 
      NPON = NINTON+1 
      NPUP = NINTUP 
      NPDN = NINTDN 
      JM   = NPUP+NPON+NPDN 
      JLE  = NPUP+1 
      JTE  = NPUP+NPON 
C 
C     READ A TABLE OF THE RELATIVE SPACING OF THE GRID LINES ON THE BLADE,
C     RELSPCE(I),  AT FRACTIONS OF THE AXIAL CHORD GIVEN BY XFRAC(I). 
C     END WITH  XFRAC(I) JUST GREATER THAN UNITY, EG 1.001 .
C     NOTE THAT THIS IS ONLY THE RELATIVE SPACING NOT THE ABSOLUTE ONE.
C
      IIN=0
C
      WRITE(8,*)
      WRITE(8,*) IIN,XFRAC(IIN),RELSPCE(IIN)
C
   72 IIN=IIN+1
      READ(7,*)      XFRAC(IIN),RELSPCE(IIN)
      WRITE(8,*) IIN,XFRAC(IIN),RELSPCE(IIN)
      IF(XFRAC(IIN).GE.1.) GO TO 71
      GO TO 72
C
   71 CONTINUE
C
C      INTERPOLATE TO LOCATE THE POSITION OF THE GRID POINTS ON THE BLADE
C
      WRITE(8,*)
      WRITE(8,*) ' POSITIONS OF THE GRID POINTS ON THE BLADE '
      WRITE(8,*) ' AND THE RELATIVE SPACING OF THE POINTS '
      WRITE(8,*)
      DO 73 JJ=1,NINTON
      XX= FLOAT(JJ-1)/(NINTON-1)
      CALL INTP(IIN,XFRAC,RELSPCE,XX,F(JJ))
      WRITE(8,*) JJ,XX,F(JJ)
   73 CONTINUE
C 
      SUM=0.0 
      DO 5 I=1,NINTON 
   5  SUM=SUM + F(I) 
      DO 6 I=1,NINTON 
    6 F(I)=F(I)/SUM 
C 
      XGRIDON(1)=0.0
      DO 8 I=1,NINTON 
    8 XGRIDON(I+1)=XGRIDON(I) +F(I)
C 
C      READ IN THE NUMBER OF BLADES IN THE BLADE ROW, THE ROTATIONAL SPEED
C      AND THE UPSTREAM AND DOWNSTREAM PRESSURES FOR THIS ROW.
C 
      READ(7,*) NBLAD
      READ(7,*) RPMROW,PUP,PLE,PTE,PDOWN
C  
      JMSUB=JM
C      IF(NROW.EQ.1) JMSUB=JM-1
C
C     READ IN THE TIP CLEARANCE PARAMETERS
C
      READ(7,*) IDUMMY,IDUMMY,JROTHS,JROTHE,JROTTS,JROTTE,
     &          DUMMY,RPMHUB
C
      IF(KTIPS.NE.0) THEN
      DO 222 K=1,KM
      TKMULT(K) = 1.0
      IF(K.GE.KTIPS.AND.K.LE.KTIPE) TKMULT(K) = 0.0
  222 CONTINUE
      IF(KTIPS.NE.1)  TKMULT(KTIPS-1) = 0.5
      IF(KTIPE.NE.KM) TKMULT(KTIPE+1) = 0.5
      IF(KTIPS.NE.1)  TKMULT(KTIPS-2) = 0.9
      IF(KTIPE.NE.KM) TKMULT(KTIPE+2) = 0.9

      ENDIF
C
C
C      WRITE INTEGER CONTROL NUMBERS TO FINAL DATA SET
C
      WRITE(4,1600) JMSUB,JLE,JTE,NBLADE,KTIPS,KTIPE,JROTHS,JROTHE,
     &              JROTTS,JROTTE
      WRITE(4,1605) RPMROW,PINLET,PINLET,PINLET,PINLET,FRACTIP,RPMHUB
C
 1605 FORMAT(F10.3,4F10.1,F10.4,F10.3)
C
      IF(KTIPS.NE.0) THEN
      WRITE(4,4) (TKMULT(K),K=1,KM)
      ENDIF
C 
C******************************************************************************
C 
C     START THE DO LOOP OVER THE NUMBER OF BLADE SECTIONS TO BE INPUT.
C     THE SECTIONS ARE INPUT AS IF ON A CYLINDRICAL SURFACE, IE CONSTANT
C     RADIUS AND ARE LATER TRANSFORMED TO A STREAM SURFACE WITH VARIABLE RADIUS.
C
C*******************************************************************************
C
      DO 1000 NSECT=1,NOSECT
C 
C      INPUT A TITLE FOR THIS BLADE SECTION  eg  ' HUB SECTION ' .
C      THIS IS NOT USED BUT HELPS TO EDIT THE DATA FILE
C
      READ(7,997)  dummy line
      READ(7,997)  TITLE
      READ(7,997)  dummy line
C
      IF(NSECT.EQ.1) THEN
           WRITE(6,997) ROWTIT
           WRITE(6,998) NSECT
           WRITE(6,997) TITLE
           WRITE(6,*) ' '
      END IF
C
  998 FORMAT( ' SECTION NUMBER ',I5)
C
      IF(NSECT.EQ.1) RSURF = RHUB
      IF(NSECT.EQ.2) RSURF = RTIP
      IF(NSECT.EQ.3) RSURF = RBOUND
C
C
C     READ IN THE NUMBER OF POINTS (NPIN) AT WHICH THE CAMBER LINE SLOPE
C     IS TO BE WILL BE SPECIFIED. ALSO THE NUMBER OF POINTS TO BE USED
C     TO GENERATE THE BLADE SURFACE  (NXPTS)  AND NUMBER OF TIMES (NSMOOTH)
C     THAT THE INPUT VALUES OF SLOPE WILL BE SMOOTHED.
C
C      IF NPIN IS ZERO THEN THE COORDINARES ARE READ IN DIRECTLY FROM THE FILE
C                       AND NO NEW SECTION IS GENERATED.
C 
      READ(7,*)  NPIN,NXPTS,NSMOOTH
C
C    READ IN EXISTING BLADE X,Y COORDINATES IF NPIN = 0.
C
      IF(NPIN.EQ.0) THEN
      READ(7,*) NPOINTS,IFCLOCK,IFREV
C
C     READ IN BLADE X,Y COORDINATES AT 'npoints' POINTS
C     IF THESE GO CLOCKWISE ROUND THE BLADE USE 'ifclock' = 0
C     IF ANTICLOCKWISE USE 'ifclock' = 1.
C     IF YOU WISH TO INVERT THE BLADE SET 'ifrev' =  1.
C
      XMAX = -1000000.0
      XMIN =  1000000.0
      FY = 1.0
      IF(IFREV.NE.0) FY = -1.0
C
      DO 777 N = 1,NPOINTS
      READ(7,*) XIN(N),YIN(N)
      IF(XIN(N).GT.XMAX) XMAX = XIN(N)
      IF(XIN(N).LT.XMIN) THEN
      XMIN = XIN(N)
      YLE =  YIN(N)
      ENDIF
 777  CONTINUE
C
      XDIFF = XMAX - XMIN
      WRITE(8,*)
      WRITE(8,*) ' REARRANGED AND SCALED INPUT BLADE SECTION '
      WRITE(8,*)
      DO 776 N=1,NPOINTS
      NN = N
      IF(IFCLOCK.NE.0) NN = NPOINTS - N  + 1
      XSURF(NN) = (XIN(N)-XMIN)/XDIFF
      YSURF(NN) = FY*(YIN(N)-YLE)/XDIFF
      WRITE(8,*) NN,XSURF(NN),YSURF(NN)
  776 CONTINUE
      DO 779 N=1,NPOINTS
      XIN(N) = XSURF(N)
      YIN(N) = YSURF(N)
  779 CONTINUE
      DO 778 N=1,500
 778  FTHICK(N) = 1.0
      NIN = NPOINTS
      GO TO 9999
      ENDIF
C
C                  GENERATE A NEW BLADE IF NPIN IS NOT ZERO.
C
C
C     READ IN THE FRACTION OF AXIAL CHORD AND SLOPE IN DEGREES AT 'NPIN' POINTS
C 
      DO 10 N=1,NPIN
      READ(7,*)  FRAC(N),SLOPE(N) 
      SLOPE(N) = ANG_ATTACK
   10 SLOPE(N) = TAN(SLOPE(N)*DEGRAD)
C
C      SMOOTH THE CAMBER LINE SLOPE
C
      IF(NSMOOTH.EQ.0) GO TO 15
C
      SMOOTH = 0.25
      DO 116 NSMTH =1,NSMOOTH
      DO 117 J=2,NPIN-1
      DX1 = FRAC(J)-FRAC(J-1)
      DX2 = FRAC(J+1)-FRAC(J)
      AVG = SLOPE(J-1) + (DX1/(DX1+DX2))*(SLOPE(J+1)-SLOPE(J-1))
  117 TEMP(J) = (1.-SMOOTH)*SLOPE(J)+SMOOTH*AVG
      DO 118 J=2,NPIN-1
  118 SLOPE(J)=TEMP(J)
  116 CONTINUE
C
   15 CONTINUE
C
C      INTERPOLATE TO FIND THE CAMBER LINE SHAPE AT  'NXPTS'  POINTS
C      EQUALLY DISTRIBUTED IN TERMS OF ANGLE THETA.
C
      YIN(1) = 0.0
      XIN(1) = 0.0
      DYDX(1) = SLOPE(1)
      DO 16 N = 2,NXPTS
      THETA  = (N-1)*PI/(NXPTS-1)
      XIN(N) = 0.5*(1.-COS(THETA))
      DX     = XIN(N)-XIN(N-1)
      CALL INTP(NPIN,FRAC,SLOPE,XIN(N),DYDX(N))
      DY     = 0.5*(DYDX(N)+DYDX(N-1))*DX
      YIN(N) = YIN(N-1) + DY
   16 CONTINUE
C
C      READ IN THE LEADING EDGE THICKNESS,TRAILING EDGE THICKNESS AND THE
C      MAXIMUM THICKNESS ALL AS FRACTIONS OF THE TRUE CHORD.
C
C      ALSO INPUT THE FRACTIONS OF AXIAL CHORD OVER WHICH THE LEADING EDGE 
C      AND TRAILING EDGE WILL BE ROUNDED OFF, 'XMODLE' AND 'XMODTE'
C      
C      'FIP' IS AN EXPONENT THAT DETERMINES THE SHAPE OF THE THICKNESS
C       DISTRIBUTION.
C                  'FIP'=1 GIVES A WEDGE TYPE OF DISTRIBUTION,
C                  'FIP'=2 GIVES A PARABOLIC TYPE,
C                  'FIP'=4 GIVES A ALMOST CONSTANT THICKNESS WITH ROUNDED
C                          LEADING AND TRAILING EDGES, ETC.
C
C      THE USUAL VALUE IS 'FIP'=2 .
C
      IF(NSECT.EQ.1)  THEN
C
      WRITE(6,*) ' INPUT 1 TO USE A FLAT PLATE WING.'
      WRITE(6,*) ' INPUT 2 TO GENERATE A DIAMOND WEDGE TYPE OF SUPERSONI
     &C WING PROFILE.'
      WRITE(6,*) ' INPUT 3 TO GENERATE A TYPICAL SUBSONIC AEROFOIL PROFI
     &LE.'
C
      READ(5,*) I_PROFILE
C
      ENDIF
C
      READ(7,*)  TKLE,TKTE,TKMAX,XTMAX,XMODLE,XMODTE,FIP
C
      IF(FIP.LT.0.001) FIP=2.
C
      IF(I_PROFILE.EQ.1) THEN
      TKLE = 0.01
      TKTE = 0.01
      TKMAX = 0.0
      XTMAX = 0.5
      XMODLE = 0.01
      XMODTE = 0.01
      FIP = 2.0
      END IF
C
C
      IF(I_PROFILE.EQ.2) THEN

      IF(NSECT.EQ.1) THEN
      WRITE(6,*) ' INPUT THE POINT OF MAXIMUM THICKNESS AS A FRACTION OF
     & THE WING CHORD,   e.g.  0.5 '
      READ(5,*) XTMAX
      ENDIF
C
      TKLE   = 0.005
      TKTE   = 0.02
      TKMAX  = 0.04      
      XMODLE = 0.01
      XMODTE =  0.1
      FIP    = 1.0
      END IF
C
C
      IF(I_PROFILE.EQ.3) THEN
      TKLE = 0.02
      TKTE = 0.01
      TKMAX = 0.05
      XTMAX = 0.35
      XMODLE = 0.02
      XMODTE = 0.01
      FIP = 2.0
      END IF
C
C
C     'ITKTYP' DETERMINES WHETHER THE THICKNESS IS ADDED PERPENDICULAR
C      TO THE BLADE CAMBER LINE. OR IS THE BLADE TANGENTIAL THICKNESS.
C
C     IF 'ITKTYP' = 0 OR 1 THE THICKNESS IS PERPENDICULAR TO THE CAMBER LINE.
C     IF 'ITKTYP' = 2 OR 3 THE THICKNESS IS THE TANGENTIAL THICKNESS.
C     IF 'ITKTYP' = 1 OR 3 THE THICKNESS IS FIRST THINNED BY THE FACTOR 'FACTK'
C     AND THEN SCALED BACK TO THE REQUIRED THICKNESS. THIS MAY BE USED TO
C     PREVENT THE GENERATORS CROSSING OVER FOR VERY THICK BLADES.
C
      READ(7,*) ITKTYP,FACTK
C 
C 
      POWER = LOG(0.5)/LOG(XTMAX)
      XMAX=XIN(NXPTS)
C
C      ISSUE A WARNING IF THE BLADE IS THICK.
C
      IF(ITKTYP.EQ.0.AND.(TKLE+TKMAX).GT.0.2)  THEN
C
      WRITE(6,666)
  666 FORMAT(' THE BLADE IS VERY THICK AND YOU MIGHT HAVE A PROBLEM WITH
     &',/,' THICKNESS GENERATORS PERPENDICULAR TO THE CAMBER LINE CROSSI
     &NG OVER.',/,' THIS CAN BE AVOIDED BY FIRSTLY GENERATING A THIN BLA
     &DE AND THEN SCALING',/,' THE THICKNESS. THIS IS DONE BY SETTING
     & itktyp =1    AND   factk  TO A VALUE ABOUT 0.1',/)
      ENDIF
C
C      FIND THE BLADE STAGGER AND ITS SECANT
C
      STAGER = (YIN(NXPTS)-YIN(1))/(XIN(NXPTS)-XIN(1))
      CTCX   =  SQRT(STAGER*STAGER + 1)
C
C
C       FORM THE BLADE THICKNESS DISTRIBUTION.
C
      IF(ITKTYP.EQ.0.OR.ITKTYP.EQ.2) FACTK = 1.0
      MP = 3
C
      DO 26 N=1,NXPTS
      FAXCRD = XIN(N)/XMAX
      XIN(N) = FAXCRD
      XTRANS = FAXCRD**POWER 
C
      TKLIN  = TKLE   +  XIN(N)*(TKTE-TKLE)
      TKIN(N)= TKLIN  +  TKMAX*(1.0 -ABS(XTRANS-0.5)**FIP/(0.5**FIP))
C
      IF(I_PROFILE.EQ.2) THEN
      FX = FAXCRD/XTMAX
      IF(FAXCRD.GT.XTMAX) FX = (1. - FAXCRD)/(1. - XTMAX)
      TKIN(N) = TKLIN + TKMAX*FX
      END IF
C
      FTHICK(N) = FACTK
      TKIN(N)= TKIN(N)*CTCX*FTHICK(N)
      TKIN(N)= TKIN(N)/XMAX
      YIN(N) = YIN(N)/XMAX
C
C      ADJUST THE LEADING  EDGE
C
      IF(XMODLE.LT.0.001) GO TO 27
      XMLE = FAXCRD/XMODLE
      IF(XMLE.GT.1.0) GO TO 27 
      XMLE = ABS(XMLE -1.)
      TKIN(N)=TKIN(N)*SQRT(1.-XMLE**MP)
   27 CONTINUE
C
C     ADJUST THE TRAILING EDGE
C
      IF(XMODTE.LT.0.001) GO TO 26
      XMTE = (1.-FAXCRD)/XMODTE
      IF(XMTE.GT.1.0) GO TO 26
      XMTE = XMTE-1.
      TKIN(N) = TKIN(N)*SQRT(1.-XMTE*XMTE)
   26 CONTINUE
C
C     ADD THE THICKNESS ON TO THE CAMBER LINE
C     TO FORM THE BLADE SUCTION AND PRESSURE SURFACES
C     PERPENDICULAR TO CAMBER LINE IF 'ITKTYP' = 0 OR 1
C     TANGENTIAL THICKNESS IF 'ITKTYP' = 2 or 3
C
      IF (TKIN(1).LT.0.0001) TKIN(1)=0.0001
      IF(TKIN(NXPTS).LT.0.0001)TKIN(NXPTS)=0.0001
C
      DO 30 N=1,NXPTS
      NLOW = NXPTS + (NXPTS+1-N)
      SLOPES=ATAN(DYDX(N))
      IF(ITKTYP.EQ.2.OR.ITKTYP.EQ.3) TKIN(N)=TKIN(N)*COS(SLOPES)
      YSURF(N)    = YIN(N) + 0.5*TKIN(N)*COS(SLOPES)
      YSURF(NLOW) = YIN(N) - 0.5*TKIN(N)*COS(SLOPES)
      XSURF(N)    = XIN(N) - 0.5*TKIN(N)*SIN(SLOPES)
      XSURF(NLOW) = XIN(N) + 0.5*TKIN(N)*SIN(SLOPES)
   30 CONTINUE
C
      XSURF(NXPTS) = XSURF(NXPTS) + 0.00001
C
      DO N= 1,2*NXPTS
      WRITE(8,881)  XSURF(N),YSURF(N)
      END DO
  881 FORMAT(' XSURF , YSURF ',2F12.5)
C
      NIN  = 2*NXPTS
C
C     RE ENTER HERE IF THE BLADE COORDINATES WERE READ IN DIRECTLY
C
 9999 CONTINUE
C
      NIN1 = NIN +1
C
C     ROTATE THE BLADE BY ANGLE ' ROTN ' DEGREES IN THE CLOCKWISE SENSE
C     ABOUT THE AXIS 'XROT, YROT' .
C
      READ(7,*) ROTN,XROT,YROT
C
      IF(ROTN.LT.0.0001) GO TO 32
C
      ROTN = ROTN*DEGRAD
C
      DO 31 N=1,NIN
      XDIF = XSURF(N)-XROT
      YDIF = YSURF(N)-YROT
      DIST = SQRT(XDIF*XDIF+YDIF*YDIF)
      ANGL = ATAN(YDIF/XDIF)
      IF(XDIF.LT.0.0) ANGL = ANGL + PI
      ANEW = ANGL - ROTN
      XSURF(N) = DIST*COS(ANEW)  + XROT
      YSURF(N) = DIST*SIN(ANEW)  + YROT
   31 CONTINUE
C
   32 CONTINUE
C
C      NOW FIND THE LEADING AND TRAILING EDGES
C
      DO 33 I= 1,NIN
      IM1=I-1
      IP1=I+1
      IF(I.EQ.1) IM1=NIN
      IF(I.EQ.NIN) IP1=1
      IF(XSURF(IP1).GT.XSURF(I).AND.XSURF(IM1).GE.XSURF(I)) NLE=I
      IF(XSURF(IP1).LE.XSURF(I).AND.XSURF(IM1).LT.XSURF(I)) NT =I
   33 CONTINUE
C
C      RE-ORDER THE POINTS TO COUNT CLOCKWISE FROM THE LEADING EDGE
C
      DO 40 I=1,NIN
      N = NLE+I-1
      IF(N.GT.NIN) N=N-NIN
      IF(N.EQ.NT) NTE=I
      XCLOCK(I)=XSURF(N)
   40 YCLOCK(I)=YSURF(N)
      XCLOCK(NIN+1)=XCLOCK(1)
      YCLOCK(NIN+1)=YCLOCK(1)
C
C      SET THE UPPER SURFACE COORDINATES XUP,YUP
C
      DO 555 I=1,NTE
      XUP(I)=XCLOCK(I)
  555 YUP(I)=YCLOCK(I)
C
C      SET THE LOWER SURFACE COORDINATES, XLOW,YLOW
C
      DO 66 I=NTE,NIN+1
      IR = NIN+2-I
      XLOW(IR)=XCLOCK(I)
   66 YLOW(IR)=YCLOCK(I)
C
      NSUCT=NTE
      NPRES=NIN+2-NTE
C
      XMIN   = AMIN1(XLOW(1),XUP(1))
      XMAX   = AMAX1(XUP(NSUCT),XLOW(NPRES))
      XCHORD = XMAX - XMIN
C
      WRITE(8,*)
      WRITE(8,*) ' XMAX,XMIN,XCHORD ',XMAX,XMIN,XCHORD
      WRITE(8,*)
C
C    SCALE THE BLADE SO THAT THE LE IS AT X= 0.0
C    AND THE AXIAL CHORD = 1.0
C
      WRITE(8,*)
      WRITE(8,*) '  SUCTION SURFACE POINTS '
      WRITE(8,*)
      DO 54 N=1,NSUCT
      XUP(N) = (XUP(N)-XMIN)/XCHORD
      YUP(N) = YUP(N)/XCHORD
  54  WRITE(8,*) N,XUP(N),YUP(N)
C
      WRITE(8,*)
      WRITE(8,*) ' PRESSURE SURFACE POINTS '
      WRITE(8,*)
      DO 551 N=1,NPRES
      XLOW(N) = (XLOW(N) - XMIN)/XCHORD
      YLOW(N) = YLOW(N)/XCHORD
 551  WRITE(8,*) N,XLOW(N),YLOW(N)
C
      XCHORD = 1.0
C
C     INTERPOLATE IN THE SURFACE COORDINATES TO FIND THE VALUES
C     AT X = XIN(N) DEFINED BY A COSINE DISTRIBUTION.
C
      WRITE(8,*)
      WRITE(8,*) 'INTERPOLATED POINTS ON THE BLADE '
      WRITE(8,*)
      WRITE(8,888)
  888 FORMAT('  N           X          YUP        YLOW        THICK ')
C
      DO 55 N=1,NXPTS
      WRITE(8,*) ' N,NXPTS',N,NXPTS
      THETA  = (N-1)*PI/(NXPTS-1)
      XIN(N) = 0.5*(1.-COS(THETA))
      IF(N.EQ.1) XIN(N) = 0.0
      IF(XIN(N).LT.0.25) N4 = N
      IF(XIN(N).LT.0.80) N80 = N
      XARG = XIN(N)*XCHORD
C
C      CALL INTP(NSUCT,XUP,YUP,XARG,YSIN(N))
C      CALL INTP(NPRES,XLOW,YLOW,XARG,YPIN(N))
C
      CALL LININT(NSUCT,XUP,YUP,XARG,YSIN(N))
      CALL LININT(NPRES,XLOW,YLOW,XARG,YPIN(N))
C
      YAVG    = 0.5*(YSIN(N)+YPIN(N))
      YSIN(N) = YAVG + (YSIN(N)-YAVG)/FTHICK(N)
      YPIN(N) = YAVG + (YPIN(N)-YAVG)/FTHICK(N)
      TKIN(N) = ABS(YSIN(N)-YPIN(N))
      XIN(N)  = XARG
      WRITE(8,889) N,XIN(N),YSIN(N),YPIN(N),TKIN(N)
   55 CONTINUE
 889  FORMAT(I5,4F12.4)
C
C
C      SET UP ARRAYS TO PLOT THE TRAILING EDGE DETAIL
C
      J=0
      DO 333 K= N80,NXPTS
      J=J+1
      XLTE(J) = XIN(K)
      YSTE(J) = YSIN(K)
      YPTE(J) = YPIN(K)
  333 CONTINUE
      NPTE=J
C
C
C
C     FIND THE CENTROID OF THE SECTION
C 
   37 CONTINUE 
C 
      SUM=0.0 
      SUM1=0.0 
      SUM2=0.0 
      DO 44 I=2,NXPTS
      TKIN(I) = ABS(YSIN(I)-YPIN(I))
      AREA= 0.5*(TKIN(I)+TKIN(I-1))*(XIN(I)-XIN(I-1))
      SUM = SUM  + AREA
      SUM1= SUM1 + AREA*0.5*(XIN(I)+XIN(I-1))
      SUM2= SUM2 + AREA*.5*(YSIN(I)+YSIN(I-1)-.5*TKIN(I)-0.5*TKIN(I-1))
   44 CONTINUE 
      XCENT= SUM1/SUM 
      YCENT= SUM2/SUM
C
      WRITE(8,*)
      WRITE(8,45) XCENT,YCENT 
   45 FORMAT ( '  THE BLADE CENTROID IS AT   ', 2F10.4)
      WRITE(8,*)
C 
C      INTERPOLATE TO FIND THE GRID COORDINATES AT THE CALCULATION NODES 
C 
      DO 70 I=2,NPON 
      XARG= XGRIDON(I)
      NFIN= NPUP + I 
      XGRID(NFIN)=XARG 
      CALL INTP(NXPTS,XIN,YSIN,XARG,YGRID(NFIN))
      CALL INTP(NXPTS,XIN,TKIN,XARG,TKGRID(NFIN))
      IF(XGRIDON(I).GT.XCENT.AND.XGRIDON(I-1).LT.XCENT) NSTACK=NFIN
   70 CONTINUE
C
C     READ IN THE UPSTREAM AND DOWNSTREAM GRID EXTENSIONS AS FRACTIONS 
C     OF THE AXIAL CHORD. ALSO THE ANGLES OF THE GRID EXTENSIONS IN DEGREES.
C
C     !!!!!! BEWARE THE ANGLES MAY HAVE TO BE NEGATIVE !!!!!!
C 
      READ(7,*) XCUP,XCDWN,BETUP,BETDN
C 
C 
      BETUP=TAN(BETUP*DEGRAD) 
      BETDN=TAN(BETDN*DEGRAD) 
C
C     FIND THE RATIO OF SPACINGS FOR THE UPSTREAM AND DOWNSTREAM GRIDS 
C 
      IF(NSECT.EQ.1) XCUP  = (XLEHUB - XINLET)/(XTEHUB - XLEHUB)
      IF(NSECT.GT.1) XCUP  = (XLETIP - XINLET)/(XTETIP - XLETIP)
      IF(NSECT.EQ.1) XCDWN = (XEXIT  - XTEHUB)/(XTEHUB - XLEHUB)
      IF(NSECT.GT.1) XCDWN = (XEXIT  - XTETIP)/(XTETIP - XLETIP)
C
      RUP=XCUP/F(1) 
      RDN=XCDWN/F(NINTON)
      RAT=1.2
      IF(RUP.LT.NPUP) RAT=0.9
      M=1 
  50  RHS=(RAT-1.)*RUP 
      IF(RUP.GE.NPUP) RAT=0.5*(RAT+(RHS+1.)**(1./NPUP))
      IF(RUP.LT.NPUP) RAT=0.5*(RAT+ (RAT**NPUP -1.)/RUP  + 1.)
      M=M+1
      IF(M.GT.50) GO TO 51
      GO TO 50 
   51 RATUP=RAT 
      RAT=1.2
      IF(RDN.LT.NPDN) RAT=0.9
      M=1 
   60 RHS=(RAT-1.)*RDN 
      IF(RDN.GE.NPDN) RAT=0.5*(RAT+(RHS+1.)**(1./NPDN))
      IF(RDN.LT.NPDN) RAT=((RAT**NPDN -1.)/RDN  + 1.)
      M=M+1 
      IF(M.GT.50) GO TO 61
      GO TO 60 
   61 RATDN=RAT 
      WRITE(8,65)  RATUP, RATDN 
   65 FORMAT( '  GRID SPACE RATIO UP= ', F10.5, ' DOWN = ',F10.5) 
C 
C      FORM THE GRID UPSTREAM OF THE LEADING EDGE 
C 
      DX= F(1) 
      DY=DX*BETUP
      XGRID(NPUP+1)=0.0
      YC1 = YGRID(NPUP+2)-0.5*TKGRID(NPUP+2)
      YC2 = YGRID(NPUP+3)-0.5*TKGRID(NPUP+3)
      YGRID(NPUP+1)= 2.*YC1 - YC2
      TKGRID(NPUP+1)=0.0
      DO 80 I=1,NPUP 
      NFIN= NPUP+1-I 
      XGRID(NFIN)=XGRID(NFIN+1) -  DX 
      YGRID(NFIN)=YGRID(NFIN+1) -  DY 
      TKGRID(NFIN)=0.0 
      DX=DX*RATUP 
      DY= BETUP*DX 
   80 CONTINUE
C 
C      NOW DO THE SAME FOR THE DOWNSTREAM GRID 
C 
      DX=F(NINTON) 
      DY=DX*BETDN 
      DO 90 I=1,NPDN 
      NFIN= NPUP+NPON+I 
      XGRID(NFIN)=XGRID(NFIN-1) + DX 
      YGRID(NFIN)=YGRID(NFIN-1)-0.5*TKGRID(NFIN-1) + DY
      TKGRID(NFIN)=0.0 
      DX=DX*RATDN 
      DY=DX*BETDN 
   90 CONTINUE
C
      JM=NPUP+NPON+NPDN 
      JLE=NPUP+1 
      JTE=NPUP+NPON 
      TKGRID(JTE+1)=0.5*TKGRID(JTE)
C
C 
C     INPUT DATA TO DEFINE THE STREAM SURFACE ONTO WHICH THE BLADE GENERATED
C     ABOVE WILL BE PROJECTED. NSSURF IS THE NUMBER OF POINTS IN THE TABLE.
C
C
C
      READ(7,997) dummy line
C
      READ(7,*) NSSURF
C
C      READ IN A TABLE OF NSSURF COORDINATES OF THE STREAM SURFACE ONTO WHICH THE
C      BLADE IS TO BE PROJECTED.
C      ALSO READ IN THE REQUIRED STACKING POINT.
C
      DO N   = 1,NSSURF
      RIN(N) = RSURF
      END DO

      RLE = RSURF
      RTE = RSURF
      IF(NSECT.EQ.1) XLE = XLEHUB
      IF(NSECT.GT.1) XLE = XLETIP
      IF(NSECT.EQ.1) XTE = XTEHUB
      IF(NSECT.GT.1) XTE = XTETIP
      

      READ(7,*)  (XRIN(N),N=1,NSSURF)
      READ(7,*)  (DUMMY,N=1,NSSURF)
      READ(7,*)   DUMMY,DUMMY,DUMMY,DUMMY,YSTACK,ISTACK
C
C     EVALUATE THE MERIDIONAL DISTANCE OF THE POINTS ON THE STREAM SURFACE
C
      SMERID(1) = 0.0
      DO 108 N=2,NSSURF
      DX = XRIN(N)-XRIN(N-1)
      DR = RIN(N) -RIN(N-1)
  108 SMERID(N)=SMERID(N-1)+SQRT(DX*DX+DR*DR)
C
C     FIND THE MERIDIONAL CHORD AT THE LEADING AND TRAILING EDGE POINTS
C
      ADD = 0.0
      SMERLE = SMERID(1)
      SMERTE = SMERID(NSSURF)
      DO 109 N=2,NSSURF
      DRDX = (RIN(N)-RIN(N-1))/(XRIN(N)-XRIN(N-1))
      DXR = XLE-XRIN(N-1)
      DXF = XLE-XRIN(N)
      DRR = RLE-RIN(N-1)
      DRF = RLE-RIN(N)
      IF(ABS(DRDX).LT.1.0) THEN
      IF((DXR*DXF).LE.0.0) THEN
      ADD = SQRT(DXR*DXR+DRR*DRR)
      SMERLE = SMERID(N-1) + ADD
      ENDIF
      ELSE
      IF((DRR*DRF).LE.0.0) THEN
      ADD = SQRT(DXR*DXR+DRR*DRR)
      SMERLE = SMERID(N-1) + ADD
      ENDIF
      ENDIF
      DXR = XTE-XRIN(N-1)
      DXF = XTE-XRIN(N)
      DRR = RTE-RIN(N-1)
      DRF = RTE-RIN(N)
      IF(ABS(DRDX).LT.1.0) THEN
      IF((DXR*DXF).LE.0.0) THEN
      ADD = SQRT(DXR*DXR+DRR*DRR)
      SMERTE = SMERID(N-1) + ADD
      ENDIF
      ELSE
      IF((DRR*DRF).LE.0.0) THEN
      ADD = SQRT(DXR*DXR+DRR*DRR)
      SMERTE = SMERID(N-1) + ADD
      ENDIF
      ENDIF
  109 CONTINUE
C
      SCHORD = SMERTE-SMERLE
      SCALE  = SCHORD/XCHORD
C
C     SCALE THE BLADE ONTO THE STREAM SURFACE
C     AND INTERPOLATE TO FIND THE X AND R COORDINATES
C
C      ALSO STACK THE BLADE:
C      STACK ON CENTROID IF ISTACK = 0
C      STACK ON LEADING EDGE IF ISTACK = -1
C      STACK ON TRAILING EDGE IF ISTACK = +1
C      SHIFT THE WHOLE SECTION TANGENTIALLY BY  'YSTACK'
C
      XLE = XGRID(JLE)
      YTE = YGRID(JTE)
      YLE = YGRID(JLE)
C
      DO 110 J=1,JM 
      SGRID(J)  = SMERLE + SCALE*(XGRID(J)-XLE)
      IF(ISTACK.EQ.0) YGRID(J)   = SCALE*(YGRID(J)-YCENT) + YSTACK
      IF(ISTACK.EQ.1) YGRID(J)   = SCALE*(YGRID(J)-YTE)   + YSTACK
      IF(ISTACK.EQ.-1) YGRID(J)  = SCALE*(YGRID(J)-YLE)   + YSTACK
      IF(ISTACK.EQ.2)  YGRID(J)  = SCALE*YGRID(J)
      TKGRID(J) = SCALE*TKGRID(J)
      XARG=SGRID(J)
      CALL INTP(NSSURF,SMERID,XRIN,XARG,XGRID(J))
      CALL INTP(NSSURF,SMERID,RIN,XARG,RGRID(J))
  110 CONTINUE
C 
C     FORM A CUSP AT THE TRAILING EDGE
C
      YGRID(JTE)  = 2.*YGRID(JTE-1)-YGRID(JTE-2)
      TKGRID(JTE) = 2.*TKGRID(JTE-1)-TKGRID(JTE-2)
      IF(TKGRID(JTE).LT.0.0) TKGRID(JTE)=0.0
      YGRID(JTE+1)  = 2.*YGRID(JTE)-YGRID(JTE-1)
      TKGRID(JTE+1) = 2.*TKGRID(JTE)-TKGRID(JTE-1)
      IF(TKGRID(JTE+1).LT.0.0) TKGRID(JTE+1) = 0.0
C 
C      WRITE OUT FINAL GRID TO UNIT 6
C 
      WRITE(4,4)FAC 
      WRITE(4,4) (XGRID(J),J=1,JM) 
      WRITE(4,4)FAC 
      WRITE(4,4) (YGRID(J),J=1,JM) 
      WRITE(4,4) FAC 
      WRITE(4,4) (TKGRID(J),J=1,JM) 
      WRITE(4,4) FAC 
      WRITE(4,4) (RGRID(J),J=1,JM) 
    4 FORMAT(8F10.6)
C
C***********************************************************
C***********************************************************
C
C     NOW START TO PREPARE A TBLOCK DATA SET.
C
C     FORM THE GRID COORDINATES ON THE INPUT STREAM SURFACES
C
      IMID = IM/2
C
      IF(NSECT.EQ.1) THEN
C
C     READ IN THE PITCHWISE GRID SPACINGS (WING TO TUNNEL TOP/BOTTOM)
      READ(7,*) FIRAT,FIMAX,FIEND
      WRITE(8,*) 'PITCHWISE spacings. FIRAT,FIMAX,FIEND=',FIRAT,FIMAX,FIEND
C
      CALL GRIDSPACE(IMID,FIRAT,FIMAX,FIEND,FGAP,SPACE)
      DO I=1,IMID
      WRITE(8,*) I, FGAP(I)
      END DO
C
      DO 901 I=1,IMID
      INEW = IMID + 1 -I
      DO 901 J=1,JM
      XBLOCK(J,1,INEW,1) = XGRID(J)
      RBLOCK(J,1,INEW,1) = RGRID(J)
      PITCH = HHEIGHT - YGRID(J)
      FRACC  = FGAP(I)
      YBLOCK(J,1,INEW,1) = -YGRID(J) - FRACC*PITCH
  901 CONTINUE
      DO 902 I=1,IMID
      DO 902 J=1,JM
      XBLOCK(J,1,I,2) = XGRID(J)
      RBLOCK(J,1,I,2) = RGRID(J)
      PITCH = HHEIGHT + (YGRID(J)-TKGRID(J))
      FRACC  = FGAP(I)
      YBLOCK(J,1,I,2) =(-YGRID(J)+TKGRID(J)) + FRACC*PITCH
  902 CONTINUE
      ENDIF
C
C
      IF(NSECT.EQ.2) THEN
      DO 903 I=1,IMID
      INEW = IMID + 1 -I
      DO 903 J=1,JM
      XBLOCK(J,KTIPS,INEW,1) = XGRID(J)
      RBLOCK(J,KTIPS,INEW,1) = RGRID(J)
      PITCH = HHEIGHT - YGRID(J)
      FRACC  = FGAP(I)
      YBLOCK(J,KTIPS,INEW,1) = -YGRID(J) - FRACC*PITCH
  903 CONTINUE
      DO 904 I=1,IMID
      DO 904 J=1,JM
      XBLOCK(J,KTIPS,I,2) = XGRID(J)
      RBLOCK(J,KTIPS,I,2) = RGRID(J)
      PITCH = HHEIGHT + (YGRID(J)-TKGRID(J))
      FRACC  =  FGAP(I)
      YBLOCK(J,KTIPS,I,2)= (-YGRID(J)+TKGRID(J)) + FRACC*PITCH
  904 CONTINUE
      ENDIF
C
C
      IF(NSECT.EQ.3) THEN
      DO 905 I=1,IMID
      INEW = IMID + 1 -I
      DO 905 J=1,JM
      XBLOCK(J,KM,INEW,1) = XGRID(J)
      RBLOCK(J,KM,INEW,1) = RGRID(J)
      PITCH = HHEIGHT - YGRID(J)
      FRACC  = FGAP(I)
      YBLOCK(J,KM,INEW,1) =  -YGRID(J) - FRACC*PITCH
  905 CONTINUE
      DO 906 I=1,IMID
      DO 906 J=1,JM
      XBLOCK(J,KM,I,2) = XGRID(J)
      RBLOCK(J,KM,I,2) = RGRID(J)
      PITCH =  HHEIGHT + (YGRID(J)-TKGRID(J))
      FRACC  =  FGAP(I)
      YBLOCK(J,KM,I,2)= (-YGRID(J)+TKGRID(J)) + FRACC*PITCH
  906 CONTINUE
      ENDIF
C
C
C******************** END OF GENERATION OF THIS BLADE SECTION****************
C
 1000 CONTINUE
C
C******************************************************************************
C
 9000 CONTINUE
C
C
C     FORM THE THREE DIMENSIONAL GRID COORDINATES
C     READ IN THE SPANWISE SPACING FROM TUNNEL SIDE TO BLADE TIP.
      READ(7,*) FJRAT,FJMAX,FJEND
      WRITE(8,*) 'BLADE- FJRAT, FJMAX,FJEND= ',FJRAT,FJMAX,FJEND
C
      CALL GRIDSPACE(KTIPS,FJRAT,FJMAX,FJEND,FGAP,SPACE)
      DO J=1,KTIPS
      WRITE(8,*) ' BLADE SPANWISE SPACINGS', J, FGAP(J)
      END DO
C
      DO 907 J=1,JM
      DO 907 K=1,KTIPS
      DO 907 I=1,IMID
      XBLOCK(J,K,I,1)= XBLOCK(J,1,I,1) + FGAP(K)*(XBLOCK(J,KTIPS,I,1)
     &               - XBLOCK(J,1,I,1))
      RBLOCK(J,K,I,1)= RBLOCK(J,1,I,1) + FGAP(K)*(RBLOCK(J,KTIPS,I,1)
     &               - RBLOCK(J,1,I,1))
      YBLOCK(J,K,I,1)= YBLOCK(J,1,I,1) + FGAP(K)*(YBLOCK(J,KTIPS,I,1)
     &               - YBLOCK(J,1,I,1))
      XBLOCK(J,K,I,2)= XBLOCK(J,1,I,2) + FGAP(K)*(XBLOCK(J,KTIPS,I,2)
     &               - XBLOCK(J,1,I,2))
      RBLOCK(J,K,I,2)= RBLOCK(J,1,I,2) + FGAP(K)*(RBLOCK(J,KTIPS,I,2)
     &               - RBLOCK(J,1,I,2))
      YBLOCK(J,K,I,2)= YBLOCK(J,1,I,2) + FGAP(K)*(YBLOCK(J,KTIPS,I,2)
     &               - YBLOCK(J,1,I,2))
  907 CONTINUE
C
C
C     READ IN THE SPANWISE SPACING FROM BLADE TIP TO FAR WALL.
      READ(7,*) FJRAT,FJMAX,FJEND
C     OVERWRITE THESE VALUES WITH THE FK VALUES INPUT EARLIER
      FJRAT = FRRAT
      FJMAX = FRMAX
      FJEND = FRMAX
C
      WRITE(8,*) 'TIP-- FJRAT, FJMAX,FJEND = ', FJRAT,FJMAX,FJEND
C
      KTIP = KM + 1- KTIPS
      CALL GRIDSPACE(KTIP,FJRAT,FJMAX,FJEND,FGAP,SPACE)
      DO J = 1,KTIP
      WRITE(8,*) ' TIP GAP SPACE', J, J -1 +KTIPS, FGAP(J)
      END DO
C
      DO 908 J=1,JM
      DO 908 K= KTIPS+1,KM
      KS   = K +1 - KTIPS
      DO 908 I=1,IMID
      XBLOCK(J,K,I,1)= XBLOCK(J,KTIPS,I,1) + FGAP(KS)*(XBLOCK(J,KM,I,1)
     &               - XBLOCK(J,KTIPS,I,1))
      RBLOCK(J,K,I,1)= RBLOCK(J,KTIPS,I,1) + FGAP(KS)*(RBLOCK(J,KM,I,1)
     &               - RBLOCK(J,KTIPS,I,1))
      YBLOCK(J,K,I,1)= YBLOCK(J,KTIPS,I,1) + FGAP(KS)*(YBLOCK(J,KM,I,1)
     &               - YBLOCK(J,KTIPS,I,1))
      XBLOCK(J,K,I,2)= XBLOCK(J,KTIPS,I,2) + FGAP(KS)*(XBLOCK(J,KM,I,2)
     &               - XBLOCK(J,KTIPS,I,2))
      RBLOCK(J,K,I,2)= RBLOCK(J,KTIPS,I,2) + FGAP(KS)*(RBLOCK(J,KM,I,2)
     &               - RBLOCK(J,KTIPS,I,2))
      YBLOCK(J,K,I,2)= YBLOCK(J,KTIPS,I,2) + FGAP(KS)*(YBLOCK(J,KM,I,2)
     &               - YBLOCK(J,KTIPS,I,2))
  908 CONTINUE
C
C
      JMSUB = JM
      KMSUB = KM
      IMSUB = IMID
      IM = JMSUB
      JM = KMSUB
      KM = IMSUB
      JTIP = KTIPS
      ILE  = JLE
      ITE  = JTE
      WRITE(8,*) 'IM, JM, KM for final data set', IM,JM,KM
C            
C     WRITE THE GRID COORDINATES TO FILE "gridin"
C
      OPEN(UNIT=3,FILE=TRIM(OUTPUT_PATH)//'gridin')
C
      DO 601 NB = 1,2
      DO 600 K=1,KM
C      WRITE(3,*) 'PITCHWISE K = ', K
      DO 600 J=1,JM
C      WRITE(3,*) ' SPANWISE J = ', J
      DO 600 I=1,IM
      WRITE(3,650) XBLOCK(I,J,K,NB),YBLOCK(I,J,K,NB),
     &             RBLOCK(I,J,K,NB)
  600 CONTINUE
  601 CONTINUE
  650 FORMAT(3F10.5)
      CLOSE(3)
C
      WRITE(8,*) ' FILE gridin written '
C
C      NOW WRITE OUT THE REST OF A TBLOCK DATA SET TO UNIT 11
C
      OPEN(UNIT=11,FILE=TRIM(OUTPUT_PATH)//'delta-tblock.dat')
      WRITE(11,*) TRIM(OUTPUT_PATH)
      WRITE(11,602) ERROR
C
      DUMMY = 'C'
      INDI  = 'I'
      INDE  = 'E'
      INDP  = 'P'
      INDF  = 'F'
C
      WRITE(11,*) ' DELTA WING DATA SET FOR TBLOCK'
  602 FORMAT(F7.4)
  603 FORMAT(8F12.3)
  604 FORMAT(10I7)
  605 FORMAT(A1)
  606 FORMAT(4I5,F12.3)
  607 FORMAT(2I5,F10.3)
  608 FORMAT(3I5,F10.3)
      WRITE(11,603) CP,GA
      WRITE(11,603) FT
      WRITE(11,604) NSTEPS,2000,5,0,1,0
      WRITE(11,603) 10.0,0.01,0.80,0.10
      WRITE(11,604) 2
C
C
      WRITE(11,605) DUMMY
      WRITE(11,*)  ' BLOCK 1, THE UPPER BLOCK '
      WRITE(11,605) DUMMY
      WRITE(11,604) 4,0,3,0,0,0
      WRITE(11,604) IM,JM,KM
      WRITE(11,605) DUMMY
      WRITE(11,603) 1.0,0.0,0.0,0.0
      WRITE(11,605) DUMMY
      WRITE(11,603) 1.0,1.0,1.0
      WRITE(11,603) 1.0,1.0,1.0
      WRITE(11,603) 0.8,0.2,0.2
      WRITE(11,605) DUMMY
      WRITE(11,604) 5
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 1, INLET BOUNDARY'
      WRITE(11,605) DUMMY
C
      IF(MACH.LT.1.0) THEN
      WRITE(11,605) INDI
      WRITE(11,606) 0,1,1,0,0.5
      WRITE(11,604) 1,1,1,JM,1,KM
      WRITE(11,607) 1,0,RFIN
      WRITE(11,603) 0.5,POINLET,TOINLET,0.0,0.0
      ELSE
      WRITE(11,605) INDF
      WRITE(11,606) 0,1,1,0,0.5
      WRITE(11,604) 1,1,1,JM,1,KM
      WRITE(11,603) POINLET,TOINLET,VELIN,0.0,0.0
      ENDIF
C
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 2, OUTLET BOUNDARY'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDE
      WRITE(11,606) 0,1,1,0,0.5
      WRITE(11,604) IM,IM,1,JM,1,KM
      WRITE(11,608)  1,0,0,0.1
      WRITE(11,603)  0.5,PINLET
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 3, INTERFACE UPSTREAM OF BLADE'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDP
      WRITE(11,606) 1,10,10,0,0.5
      WRITE(11,604) 1,ILE,1,JM,KM,KM
      WRITE(11,*)  ' 2   3   +i   +j  +k   1000    0    5'
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 4, INTERFACE OUTBOARD OF BLADE TIP'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDP
      WRITE(11,606) 1,10,10,0,0.5
      WRITE(11,604) ILE,ITE,JTIP,JM,KM,KM
      WRITE(11,*)  ' 2  4   +i   +j  +k   1000    0    5'
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 5, INTERFACE DOWNSTREAM OF BLADE'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDP
      WRITE(11,606) 1,10,10,0,0.5
      WRITE(11,604) ITE, IM, 1, JM,KM,KM
      WRITE(11,*)  ' 2  5   +i   +j  +k   1000    0    5'
      WRITE(11,605) DUMMY
      WRITE(11,603)  0.0,0.4,0.03
      WRITE(11,603) 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
      WRITE(11,605) DUMMY
C
C
      WRITE(11,605) DUMMY
      WRITE(11,*)  ' BLOCK 2, THE LOWER BLOCK '
      WRITE(11,605) DUMMY
      WRITE(11,604) 4,0,3,0,0,0
      WRITE(11,604) IM,JM,KM
      WRITE(11,605) DUMMY
      WRITE(11,603) 1.0,0.0,0.0,0.0
      WRITE(11,605) DUMMY
      WRITE(11,603) 1.0,1.0,1.0
      WRITE(11,603) 1.0,1.0,1.0
      WRITE(11,603) 1.2,5.0,5.0
      WRITE(11,605) DUMMY
      WRITE(11,604) 5
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 1, INLET BOUNDARY'
      WRITE(11,605) DUMMY
C
      IF(MACH.LT.1.0) THEN
      WRITE(11,605) INDI
      WRITE(11,606) 0,1,1,0,0.5
      WRITE(11,604) 1,1,1,JM,1,KM
      WRITE(11,607) 1,0,RFIN
      WRITE(11,603) 0.5,POINLET,TOINLET,0.0,0.0
      ELSE
      WRITE(11,605) INDF
      WRITE(11,606) 0,1,1,0,0.5
      WRITE(11,604) 1,1,1,JM,1,KM
      WRITE(11,603) POINLET,TOINLET,VELIN,0.0,0.0
      ENDIF
C
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 2, OUTLET BOUNDARY'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDE
      WRITE(11,606) 0,1,1,0,0.5
      WRITE(11,604) IM,IM,1,JM,1,KM
      WRITE(11,608)  1,0,0,0.1
      WRITE(11,603)  0.5,PINLET
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 3, INTERFACE UPSTREAM OF BLADE'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDP
      WRITE(11,606) 1,10,10,0,0.5
      WRITE(11,604) 1,ILE,1,JM,1,1
      WRITE(11,*)  ' 1  3   +i   +j  +k   1000    0    5'
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 4, INTERFACE OUTBOARD OF BLADE TIP'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDP
      WRITE(11,606) 1,10,10,0,0.5
      WRITE(11,604)  ILE,ITE,JTIP,JM,1,1
      WRITE(11,*)  ' 1  4   +i   +j  +k   1000    0    5'
      WRITE(11,605) DUMMY
      WRITE(11,*)' PATCH 5, INTERFACE DOWNSTREAM OF BLADE'
      WRITE(11,605) DUMMY
      WRITE(11,605) INDP
      WRITE(11,606) 1,10,10,0,0.5
      WRITE(11,604) ITE, IM, 1, JM,1,1
      WRITE(11,*)  ' 1  5   +i   +j  +k   1000    0    5'
      WRITE(11,605) DUMMY
      WRITE(11,603)  0.0,0.4,-1.0
      WRITE(11,603) 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
      WRITE(11,605) DUMMY
      WRITE(11,605) DUMMY
      WRITE(11,609) 9, 5, 1, REYNO, 0.8, 11.0, 0.1, 1.0
  609 FORMAT(3I5,5F10.1) 
      WRITE(11,605) DUMMY
      WRITE(11,605) INDI
      WRITE(11,603) VELIN, PINLET, 300.0
      WRITE(11,603) VELIN, PINLET, 300.0
      WRITE(11,605) INDI
      WRITE(11,603) VELIN, PINLET, 300.0
      WRITE(11,603) VELIN, PINLET, 300.0      
      CLOSE(11)
C     
c      END OF TBLOCK OUTPUT.
C*****************************************************************
C
C      THE FOLLOWING DATA IS A GUESS OF CONTROL VARIABLES FOR THE 3D
C      PROGRAM AND MAY BE EDITED IN THE FINAL OUTPUT FILE IF CHANGES
C      ARE REQUIRED
C 
C
C     READ IN THE INLET AND OUTLET PRESSURES FOR THE 3D PROGRAM
C     THESE ARE FOR THE WHOLE MACHINE NOT FOR A BLADE ROW
C
      WRITE(8,*) ' READING IN PUPHUB,etc '
      READ(7,997) dummy line
      READ(7,*)  PUPHUB,PUPTIP,PDHUB,PDTIP
      read(7,997) dummy line
C
C      READ IN TABLES OF INLET FLOW VARIABLES REQUIRED BY THE 3D CALCULATION
C      AT 'NINLET' POINTS AT FRACTIONS OF THE INLET SPAN GIVEN BY 'FSPAN'
C
      WRITE(8,*) ' READING IN NINLET '
C
      READ(7,*)  NINLET
      READ(7,*) (FSPAN(I),I=1,NINLET)
      READ(7,*) (POIN(I),I=1,NINLET)
      READ(7,*) (TOIN(I),I=1,NINLET)
      READ(7,*) (VTIN(I),I=1,NINLET)
      READ(7,*) (VMIN(I),I=1,NINLET)
      READ(7,*) (B1IN(I),I=1,NINLET)
      READ(7,*) (BRIN(I),I=1,NINLET)
C
C     INTERPOLATE IN THE INLET CONDITIONS.
C
      KM = 2*KM
      DO 95 K=1,KM
      ARG = SUMFR(K)/SUMFR(KM)
      CALL INTP(NINLET,FSPAN,POIN,ARG,PO1(K))
      CALL INTP(NINLET,FSPAN,TOIN,ARG,TO1(K))
      CALL INTP(NINLET,FSPAN,VTIN,ARG,VT1(K))
      CALL INTP(NINLET,FSPAN,VMIN,ARG,VM1(K))
      CALL INTP(NINLET,FSPAN,B1IN,ARG,B1(K))
      CALL INTP(NINLET,FSPAN,BRIN,ARG,BR(K))
   95 CONTINUE
C
      WRITE(4,1704) CP,GA,FT,SF,SFX,RPMROW,RF,FUP
      WRITE(4,1700) DAMP,FVMIN,FBLK1,FBLK2,FBLK3,SFEX,CLIM,RFIN
      WRITE(4,1701) PINLET,PINLET,PINLET,PINLET 
      WRITE(4,1701) (PO1(K),K=1,KM)
      WRITE(4,1701) (TO1(K),K=1,KM)
      WRITE(4,1700) (0.0,K=1,KM)
      WRITE(4,1700) (VELIN,K=1,KM)
      WRITE(4,1700) (0.0,K=1,KM)
      WRITE(4,1700) (0.0,K=1,KM) 
      WRITE(4,1700) (FR(K),K=1,KMM1)
      WRITE(4,1700) (FP(I),I=1,IMM1) 
      WRITE(4,1600) (5000,LL=1,5)
      WRITE(4,1601) (0,I=1,20)
      WRITE(4,1601) (0,K=1,KM) 
      WRITE(4,1702) 0.0,0.0,0.0,0.0,FRACPB,FRACPW,
     & REYNO,0.5
      WRITE(4,1700)  FTRANS,FACSEC
      WRITE(4,1700)  RFMIX,FEXT
      WRITE(4,1700)  FRACPB,FRACPB,FRACPB,FRACPB,FRACPB,FRACPB
 1601 FORMAT(40I2) 
 1700 FORMAT(8F10.5) 
 1701 FORMAT(8F10.1) 
 1702 FORMAT(6F10.5,F10.1,2F10.5) 
 1704 FORMAT(5F10.5,F10.2,2F10.5) 
      CLOSE(11)
C 
C
C      OPEN(UNIT=11,FILE=OUTPUT_PATH//'gridin')
C

      STOP 
      END 
C
       SUBROUTINE INTP(N,XN,YN,X,Y) 
C      THIS SUBROUTINE INTERPOLATES IN THE GIVEN TABLE OF YN AS A 
C      FUNCTION OF XN TO FIND THE VALUE OF Y AT THE INPUT VALUE 
C      OF X. 
C 
      DIMENSION XN(N),YN(N)
      Y=0. 
      L=1 
      NM=N 
      IF(N.LT.4) GO TO 8 
      NM=4 
    4 IF(X.LT.XN(L)) GO TO 5 
      IF(L.EQ.N) GO TO 3 
      L=L+1 
      GO TO 4 
    5 IF(L.GT.2) GO TO 6 
      L=1 
      GO TO 8 
    6 IF(L.NE.N) GO TO 7 
    3 L=N-3 
      GO TO 8 
    7 L=L-2 
    8 DO 11 L1=1,NM 
      CO=1 
      DO 10 L2=1,NM 
      IF(L1.EQ.L2) GO TO 9 
      TEMP=(X-XN(L+L2-1))/(XN(L+L1-1)-XN(L+L2-1)) 
      GO TO 10 
    9 TEMP=1 
   10 CO=CO*TEMP 
   11 Y=Y+CO*YN(L+L1-1) 
      RETURN 
      END 
 
C
       SUBROUTINE LININT(NPOINTS,X,Y,XARG,YANS)
C
C      THIS SUBROUTINE INTERPOLATES IN THE GIVEN TABLE OF YN AS A
C      FUNCTION OF X TO FIND THE VALUE OF Y AT THE INPUT VALUE
C      OF X = XARG.
C
C      THIS VERSION USES LINEAR INTERPOLATION TO AVOID ANY POSSIBLE
C      PROBLEMS WITH OVERSHOOTS OR UNDERSHOOTS.
C
      DIMENSION X(NPOINTS),Y(NPOINTS)
C
      IF (X(1).GT.XARG) THEN
      YANS = Y(1) + (XARG-X(1))*(Y(2)-Y(1))/(X(2)-X(1))
      ELSE
      N=2
   10 CONTINUE
      IF(X(N).GT.XARG) GO TO 20
      N=N+1
      IF(N.GT.NPOINTS) GO TO 30
      GO TO 10
   20 YANS = Y(N) + (XARG-X(N))*(Y(N-1)-Y(N))/(X(N-1)-X(N))
      GO TO 40
   30 YANS = Y(NPOINTS) + (XARG-X(NPOINTS))*(Y(NPOINTS)-Y(NPOINTS-1))/
     & (X(NPOINTS)-X(NPOINTS-1))
   40 CONTINUE
C
      ENDIF
C
      RETURN
      END
C
C******************************************************************
C
      SUBROUTINE GRIDSPACE(IM,FIRAT,FIMAX,FIEND,FGAP,SPACE)

C      FSPACE(I) IS THE FRACTION OF THE GAP AT GRID POINT 'I' .
C      HENCE IT VARIES FROM 0.0 AT I = 1 to 1.0 at I = IM.
C
C
      DIMENSION FGAP(250),SPACE(250),SREV(250)
C
      SPACE(1)    = 1.0
      SREV(IM-1)  = FIEND
      DO 10 I=2,IM-1
      IREV = IM - I
      SREV(IREV)  = SREV(IREV+1)*FIRAT
   10 SPACE(I)    = SPACE(I-1)*FIRAT
C
C
      DO  20 I=1,IM-1
      IF(FIRAT.GE.1.0) THEN
      IF(SPACE(I).GT.SREV(I)) SPACE(I) = SREV(I)
      IF(SPACE(I).GT.FIMAX)   SPACE(I) = FIMAX
      ELSE
      IF(SPACE(I).LT.SREV(I)) SPACE(I) = SREV(I)
      IF(SPACE(I).LT.FIMAX)   SPACE(I) = FIMAX
      ENDIF
   20 CONTINUE
C
C     RE ENTER HERE IF SPACE(I) WAS READ IN AS DATA.
C
  100 CONTINUE
C
      SUM = 0.0
      DO  30 I=1,IM-1
   30 SUM = SUM + SPACE(I)
C
      DO  40 I=1,IM-1
      SPACE(I) = SPACE(I)/SUM
   40 CONTINUE
C 
      FGAP(1) = 0.0
      DO 50 I=2,IM
      FGAP(I) = FGAP(I-1) +  SPACE(I-1) 
   50 CONTINUE
C 
C
      RETURN
      END  
      
 
